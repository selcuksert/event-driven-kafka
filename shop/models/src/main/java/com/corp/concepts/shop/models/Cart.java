/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.corp.concepts.shop.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Cart extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5588627208874696184L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Cart\",\"namespace\":\"com.corp.concepts.shop.models\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"customerId\",\"type\":\"long\"},{\"name\":\"cartItems\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CartItem\",\"fields\":[{\"name\":\"item\",\"type\":{\"type\":\"record\",\"name\":\"ItemDb\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"category\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"image\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"largeimage\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"features\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"size\",\"type\":{\"type\":\"enum\",\"name\":\"Size\",\"symbols\":[\"XS\",\"S\",\"M\",\"L\",\"XL\"]}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Cart> ENCODER =
      new BinaryMessageEncoder<Cart>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Cart> DECODER =
      new BinaryMessageDecoder<Cart>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Cart> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Cart> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Cart> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Cart>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Cart to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Cart from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Cart instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Cart fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long timestamp;
   private long customerId;
   private java.util.List<com.corp.concepts.shop.models.CartItem> cartItems;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Cart() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param customerId The new value for customerId
   * @param cartItems The new value for cartItems
   */
  public Cart(java.lang.Long timestamp, java.lang.Long customerId, java.util.List<com.corp.concepts.shop.models.CartItem> cartItems) {
    this.timestamp = timestamp;
    this.customerId = customerId;
    this.cartItems = cartItems;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return customerId;
    case 2: return cartItems;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: customerId = (java.lang.Long)value$; break;
    case 2: cartItems = (java.util.List<com.corp.concepts.shop.models.CartItem>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return The value of the 'customerId' field.
   */
  public long getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * @param value the value to set.
   */
  public void setCustomerId(long value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'cartItems' field.
   * @return The value of the 'cartItems' field.
   */
  public java.util.List<com.corp.concepts.shop.models.CartItem> getCartItems() {
    return cartItems;
  }


  /**
   * Sets the value of the 'cartItems' field.
   * @param value the value to set.
   */
  public void setCartItems(java.util.List<com.corp.concepts.shop.models.CartItem> value) {
    this.cartItems = value;
  }

  /**
   * Creates a new Cart RecordBuilder.
   * @return A new Cart RecordBuilder
   */
  public static com.corp.concepts.shop.models.Cart.Builder newBuilder() {
    return new com.corp.concepts.shop.models.Cart.Builder();
  }

  /**
   * Creates a new Cart RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Cart RecordBuilder
   */
  public static com.corp.concepts.shop.models.Cart.Builder newBuilder(com.corp.concepts.shop.models.Cart.Builder other) {
    if (other == null) {
      return new com.corp.concepts.shop.models.Cart.Builder();
    } else {
      return new com.corp.concepts.shop.models.Cart.Builder(other);
    }
  }

  /**
   * Creates a new Cart RecordBuilder by copying an existing Cart instance.
   * @param other The existing instance to copy.
   * @return A new Cart RecordBuilder
   */
  public static com.corp.concepts.shop.models.Cart.Builder newBuilder(com.corp.concepts.shop.models.Cart other) {
    if (other == null) {
      return new com.corp.concepts.shop.models.Cart.Builder();
    } else {
      return new com.corp.concepts.shop.models.Cart.Builder(other);
    }
  }

  /**
   * RecordBuilder for Cart instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Cart>
    implements org.apache.avro.data.RecordBuilder<Cart> {

    private long timestamp;
    private long customerId;
    private java.util.List<com.corp.concepts.shop.models.CartItem> cartItems;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.corp.concepts.shop.models.Cart.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.cartItems)) {
        this.cartItems = data().deepCopy(fields()[2].schema(), other.cartItems);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Cart instance
     * @param other The existing instance to copy.
     */
    private Builder(com.corp.concepts.shop.models.Cart other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerId)) {
        this.customerId = data().deepCopy(fields()[1].schema(), other.customerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cartItems)) {
        this.cartItems = data().deepCopy(fields()[2].schema(), other.cartItems);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.corp.concepts.shop.models.Cart.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.corp.concepts.shop.models.Cart.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerId' field.
      * @return The value.
      */
    public long getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.corp.concepts.shop.models.Cart.Builder setCustomerId(long value) {
      validate(fields()[1], value);
      this.customerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerId' field.
      * @return This builder.
      */
    public com.corp.concepts.shop.models.Cart.Builder clearCustomerId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cartItems' field.
      * @return The value.
      */
    public java.util.List<com.corp.concepts.shop.models.CartItem> getCartItems() {
      return cartItems;
    }


    /**
      * Sets the value of the 'cartItems' field.
      * @param value The value of 'cartItems'.
      * @return This builder.
      */
    public com.corp.concepts.shop.models.Cart.Builder setCartItems(java.util.List<com.corp.concepts.shop.models.CartItem> value) {
      validate(fields()[2], value);
      this.cartItems = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cartItems' field has been set.
      * @return True if the 'cartItems' field has been set, false otherwise.
      */
    public boolean hasCartItems() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cartItems' field.
      * @return This builder.
      */
    public com.corp.concepts.shop.models.Cart.Builder clearCartItems() {
      cartItems = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Cart build() {
      try {
        Cart record = new Cart();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.customerId = fieldSetFlags()[1] ? this.customerId : (java.lang.Long) defaultValue(fields()[1]);
        record.cartItems = fieldSetFlags()[2] ? this.cartItems : (java.util.List<com.corp.concepts.shop.models.CartItem>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Cart>
    WRITER$ = (org.apache.avro.io.DatumWriter<Cart>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Cart>
    READER$ = (org.apache.avro.io.DatumReader<Cart>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timestamp);

    out.writeLong(this.customerId);

    long size0 = this.cartItems.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.corp.concepts.shop.models.CartItem e0: this.cartItems) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timestamp = in.readLong();

      this.customerId = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<com.corp.concepts.shop.models.CartItem> a0 = this.cartItems;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.corp.concepts.shop.models.CartItem>((int)size0, SCHEMA$.getField("cartItems").schema());
        this.cartItems = a0;
      } else a0.clear();
      SpecificData.Array<com.corp.concepts.shop.models.CartItem> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.corp.concepts.shop.models.CartItem>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.corp.concepts.shop.models.CartItem e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.corp.concepts.shop.models.CartItem();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timestamp = in.readLong();
          break;

        case 1:
          this.customerId = in.readLong();
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<com.corp.concepts.shop.models.CartItem> a0 = this.cartItems;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.corp.concepts.shop.models.CartItem>((int)size0, SCHEMA$.getField("cartItems").schema());
            this.cartItems = a0;
          } else a0.clear();
          SpecificData.Array<com.corp.concepts.shop.models.CartItem> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.corp.concepts.shop.models.CartItem>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.corp.concepts.shop.models.CartItem e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.corp.concepts.shop.models.CartItem();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










